{"version":3,"file":"app.61af65814d4e5500c34c.js","mappings":"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EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAC3D,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAChD,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAChD,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAG1CC,EAAO,CACT,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAChD,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAChD,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAChD,EAAG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","sources":["webpack://chess/./src/app/connection/config.js","webpack://chess/webpack/bootstrap","webpack://chess/webpack/runtime/define property getters","webpack://chess/webpack/runtime/hasOwnProperty shorthand","webpack://chess/webpack/runtime/make namespace object","webpack://chess/./src/app/service/index.js","webpack://chess/./src/base/Component/index.js","webpack://chess/./src/common/Header/index.js","webpack://chess/./src/common/Button/index.js","webpack://chess/./src/common/Input/index.js","webpack://chess/./src/common/Input/style.module.css?18cc","webpack://chess/./src/app/router/index.js","webpack://chess/./src/app/connection/index.js","webpack://chess/./src/app/data/actions.js","webpack://chess/./src/app/data/store.js","webpack://chess/./src/app/data/index.js","webpack://chess/./src/app/data/reducers.js","webpack://chess/./src/app/data/middlewares.js","webpack://chess/./src/app/connection/utils.js","webpack://chess/./src/modules/Menu/index.js","webpack://chess/./src/modules/Menu/style.module.css?3c5c","webpack://chess/./node_modules/chess.js/dist/esm/chess.js","webpack://chess/./src/modules/Chess/style.module.css?0976","webpack://chess/./src/pages/game.js","webpack://chess/./src/index.js","webpack://chess/./src/pages/home.js","webpack://chess/./src/pages/alice.js","webpack://chess/./src/pages/bob.js","webpack://chess/./src/pages/connect.js","webpack://chess/./src/modules/Chess/index.js"],"sourcesContent":["export const peerConfiguration = {\n  iceServers: [\n    // Google STUN серверы\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' },\n    { urls: 'stun:stun3.l.google.com:19302' },\n    { urls: 'stun:stun4.l.google.com:19302' },\n    // Twilio STUN сервер\n    { urls: 'stun:global.stun.twilio.com:3478' },\n    // Mozilla STUN сервер (неофициальный)\n    { urls: 'stun:stun.services.mozilla.com' },\n    // Nextcloud STUN сервер\n    { urls: 'stun:stun.nextcloud.com:443' },\n    // Nummertje STUN сервер\n    { urls: 'stun:numb.viagenie.ca' },\n    // VoIP STUN серверы\n    { urls: 'stun:stun.voip.blackberry.com:3478' },\n    { urls: 'stun:stun.voipbuster.com' },\n    { urls: 'stun:stun.voxgratia.org' },\n    { urls: 'stun:freestun.net:3479' },\n\n    { urls: 'stun:iphone-stun.strato-iphone.de:3478' },\n    { urls: 'stun:numb.viagenie.ca:3478' },\n    { urls: 'stun:s1.taraba.net:3478' },\n    { urls: 'stun:s2.taraba.net:3478' },\n    { urls: 'stun:stun.12connect.com:3478' },\n    { urls: 'stun:stun.12voip.com:3478' },\n    { urls: 'stun:stun.1und1.de:3478' },\n    { urls: 'stun:stun.2talk.co.nz:3478' },\n    { urls: 'stun:stun.2talk.com:3478' },\n    { urls: 'stun:stun.3clogic.com:3478' },\n    { urls: 'stun:stun.3cx.com:3478' },\n    { urls: 'stun:stun.a-mm.tv:3478' },\n    { urls: 'stun:stun.aa.net.uk:3478' },\n    { urls: 'stun:stun.acrobits.cz:3478' },\n\n    { urls: 'stun:stun.actionvoip.com:3478' },\n    { urls: 'stun:stun.advfn.com:3478' },\n    { urls: 'stun:stun.aeta-audio.com:3478' },\n    { urls: 'stun:stun.aeta.com:3478' },\n    { urls: 'stun:stun.alltel.com.au:3478' },\n    { urls: 'stun:stun.altar.com.pl:3478' },\n    { urls: 'stun:stun.annatel.net:3478' },\n    { urls: 'stun:stun.antisip.com:3478' },\n    { urls: 'stun:stun.arbuz.ru:3478' },\n    { urls: 'stun:stun.avigora.com:3478' },\n    { urls: 'stun:stun.avigora.fr:3478' },\n    { urls: 'stun:stun.awa-shima.com:3478' },\n    { urls: 'stun:stun.awt.be:3478' },\n    { urls: 'stun:stun.b2b2c.ca:3478' },\n  ],\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const PUBLIC_SW_PATH = './sw.js';\n\nexport const makeServiceWorkers = async () => {\n  if (navigator.serviceWorker) {\n    try {\n      const response = await navigator.serviceWorker.register(PUBLIC_SW_PATH);\n      console.log('SW register success', response);\n    } catch (error) {\n      console.error('SW register failed:', error);\n    }\n  }\n};\n","export default class {\n  constructor(tagName, attributes = {}) {\n    this._element = document.createElement(tagName);\n    for (const [key, value] of Object.entries(attributes)) {\n      this._element.setAttribute(key, value);\n    }\n  }\n\n  get element() {\n    return this._element;\n  }\n\n  subscribe(store, callback) {\n    store.subscribe(callback);\n    callback();\n  }\n}\n","import { Component } from '@/base';\nimport './style.scss';\n\nexport default class extends Component {\n  constructor(text) {\n    super('div');\n    this._element.innerText = text;\n    this._element.classList.add('header');\n  }\n\n  updateText(text) {\n    this._element.innerText = text;\n  }\n}\n","import './style.css';\nimport { Component } from '@/base';\n\nexport default class extends Component {\n  constructor(text, onClick) {\n    super('button');\n    this._element.innerText = text;\n    this._element.classList.add('button');\n    this._element.onclick = onClick;\n  }\n}\n","import { Component } from '@/base';\nimport style from './style.module.css';\n\nexport default class extends Component {\n  constructor() {\n    super('input');\n    this._element.classList.add(style.input);\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"X6UxfUUG\"};","class Router {\n  constructor(pageId = 'page', isHashRouter = true) {\n    !isHashRouter && console.log('url routing is not available now');\n    this.pageId = pageId;\n\n    window.addEventListener('hashchange', (event) => {\n      this._resolve();\n    });\n\n    window.addEventListener('DOMContentLoaded', () => {\n      this._resolve();\n    });\n  }\n\n  initRoutes(routes) {\n    this._routes = routes;\n  }\n\n  initPageContainer(element) {\n    this._pageContainer = element;\n    this._pageContainer.id = 'page-container';\n  }\n\n  _activeClassResolver(eventType, callback) {\n    window.addEventListener(eventType, () => {\n      if (location.hash === '') {\n        callback('#');\n      } else {\n        callback(location.hash);\n      }\n    });\n  }\n\n  updateActiveClass(callback) {\n    this._activeClassResolver('hashchange', callback);\n    this._activeClassResolver('DOMContentLoaded', callback);\n  }\n\n  navigate(url) {\n    location.hash = url;\n  }\n\n  isActive(url) {\n    if (!location.hash && url === '#') {\n      return true;\n    }\n    if (location.hash === url) {\n      return true;\n    }\n    return false;\n  }\n\n  _updatePage(element) {\n    this._pageContainer.innerHTML = '';\n    this._pageContainer.appendChild(element);\n  }\n\n  _resolve() {\n    if (location.hash === '') {\n      const getHomePage = this._routes['/'];\n      if (getHomePage) {\n        this._updatePage(getHomePage());\n      }\n      return;\n    }\n\n    const getNewPage = this._routes[location.hash.replace('#', '/')];\n    if (getNewPage) {\n      this._updatePage(getNewPage());\n    } else {\n      this._pageContainer.innerHTML = '404 | Not Found';\n    }\n  }\n}\n\nexport default new Router();\n","const { peerConfiguration } = require('./config');\n\nclass WebRTCConnection {\n  constructor(peerConfiguration) {\n    this.peerConfiguration = peerConfiguration;\n  }\n\n  initPeerConnection() {\n    const state = JSON.parse(localStorage.getItem('chess-state'));\n    if (state?.connection) {\n      this.peerConfiguration.iceServers.push(...state.connection.turn);\n    }\n    this.peer = new RTCPeerConnection(this.peerConfiguration);\n  }\n\n  initLogger(logContainer) {\n    const addMessage = (message, status) => {\n      const log = document.createElement('div');\n      log.style.paddingBottom = '5px';\n      switch (status) {\n        case 'ok':\n          if (message) {\n            log.style.color = 'green';\n          }\n          break;\n        case 'error':\n          log.style.color = 'red';\n          break;\n        case 'state':\n          log.style.color = 'orange';\n          break;\n        default:\n          break;\n      }\n      log.innerText = message;\n      logContainer.prepend(log);\n    };\n    this.peer.onconnectionstatechange = (event) => {\n      const message = `[state changed]: ${this.peer.iceConnectionState}`;\n      addMessage(message, 'state');\n    };\n    this.peer.onicecandidateerror = (event) => {\n      addMessage(event.type, 'error');\n    };\n    this.peer.onicecandidate = (event) => {\n      const message = event.candidate?.candidate;\n      addMessage(message, 'ok');\n    };\n  }\n\n  getLocalDescription() {\n    return JSON.stringify(this.peer.localDescription);\n  }\n\n  onIceCandidate(callback) {\n    this.peer.addEventListener('icecandidate', () => {\n      callback();\n    });\n  }\n\n  setRemoteDescription(rowData) {\n    this.peer.setRemoteDescription(JSON.parse(rowData));\n  }\n\n  async createOffer() {\n    try {\n      const offer = await this.peer.createOffer();\n      this.peer.setLocalDescription(offer);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async createAnswer() {\n    try {\n      const answer = await this.peer.createAnswer();\n      this.peer.setLocalDescription(answer);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  onOpen(role, callback) {\n    switch (role) {\n      case 'alice':\n        this.peer.ondatachannel = (event) => {\n          console.log('on data channel', event);\n          this.dataChannel = event.channel;\n          this.dataChannel.onopen = callback;\n        };\n        break;\n      case 'bob':\n        this.dataChannel = this.peer.createDataChannel('channel-name');\n        this.dataChannel.onopen = callback;\n        break;\n      default:\n        console.error('unknown role');\n        break;\n    }\n  }\n}\n\nexport const connection = new WebRTCConnection(peerConfiguration);\n","// Profile\nexport const SET_USERNAME = 'SET_USERNAME';\n\nexport const FETCH_ERROR = 'FETCH_ERROR';\n\n// Connection\nexport const SET_TURN_SERVERS = 'SET_TURN_SERVERS';\nexport const DELETE_TURN_SERVERS = 'DELETE_TURN_SERVERS';\n\n// Game\nexport const SET_ORIENTATION = 'SET_ORIENTATION';\n","const LOCAL_STORAGE_KEY = 'chess-state';\n\nexport class Store {\n  constructor(reducers, middlewares = [], isLocalStorageConnected = true) {\n    this._reducers = reducers;\n    this._middlewares = middlewares;\n    this._isLocalStorageConnected = isLocalStorageConnected;\n\n    const stateFromLocalStorage = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY)\n    );\n    if (this._isLocalStorageConnected && stateFromLocalStorage) {\n      this._state = stateFromLocalStorage;\n    } else {\n      this._state = this._reduce();\n    }\n\n    this._listeners = [];\n    this._initMiddlewares();\n  }\n\n  _initMiddlewares() {\n    const middlewareAPI = {\n      getState: this.getState.bind(this),\n      dispatch: (action, ...args) => this.dispatch(action, ...args),\n    };\n    const chain = this._middlewares.map((middleware) =>\n      middleware(middlewareAPI)\n    );\n    this.dispatch = chain.reduce(\n      (next, middleware) => middleware(next),\n      this.dispatch.bind(this)\n    );\n  }\n\n  _reduce(state, action) {\n    return Object.keys(this._reducers).reduce((acc, key) => {\n      acc[key] = this._reducers[key](state && state[key], action);\n      return acc;\n    }, {});\n  }\n\n  getState() {\n    return this._state;\n  }\n\n  dispatch(action) {\n    this._state = this._reduce(this._state, action);\n    if (this._isLocalStorageConnected) {\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this._state));\n    }\n    this._listeners.forEach((listener) => listener());\n  }\n\n  subscribe(listener) {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((l) => l !== listener);\n    };\n  }\n}\n","import { fetchMiddleware } from './middlewares';\nimport { connectionReducer, gameReducer, profileReducer } from './reducers';\nimport { Store } from './store';\n\nexport const store = new Store(\n  {\n    profile: profileReducer,\n    connection: connectionReducer,\n    game: gameReducer,\n  },\n  [fetchMiddleware]\n);\n","import {\n  SET_USERNAME,\n  SET_TURN_SERVERS,\n  FETCH_ERROR,\n  DELETE_TURN_SERVERS,\n  SET_ORIENTATION,\n} from './actions';\n\nexport const profileReducer = (\n  state = { username: 'user', avatar: '' },\n  action = {}\n) => {\n  switch (action.type) {\n    case SET_USERNAME:\n      return { ...state, text: action.payload.username };\n    default:\n      return state;\n  }\n};\n\nexport const connectionReducer = (\n  state = { stun: [], turn: [], error: '' },\n  action = {}\n) => {\n  switch (action.type) {\n    case SET_TURN_SERVERS:\n      return { ...state, turn: action.payload.data };\n    case DELETE_TURN_SERVERS:\n      return { ...state, turn: [] };\n    case FETCH_ERROR:\n      return { ...state, error: action.payload.error };\n    default:\n      return state;\n  }\n};\n\nexport const gameReducer = (state = { orientation: '' }, action = {}) => {\n  switch (action.type) {\n    case SET_ORIENTATION:\n      return { ...state, orientation: action.payload.orientation };\n    default:\n      return state;\n  }\n};\n","import { isPeerConfigObject } from '../connection/utils';\nimport { FETCH_ERROR } from './actions';\n\nexport const fetchMiddleware = (store) => (next) => (action) => {\n  if (action.isFetch) {\n    fetch(action.payload.url)\n      .then((response) => response.json())\n      .then((data) => {\n        console.log('success response:', data);\n        return isPeerConfigObject(data);\n      })\n      .then((data) => {\n        const newAction = {\n          type: action.type,\n          payload: { data },\n        };\n        store.dispatch(newAction);\n      })\n      .catch((error) => {\n        const errorMessage =\n          error.name === 'SyntaxError' ? 'Fetch error' : error.message;\n        store.dispatch({\n          type: FETCH_ERROR,\n          payload: { error: errorMessage },\n        });\n        setTimeout(() => {\n          store.dispatch({ type: FETCH_ERROR, payload: { error: '' } });\n        }, 1500);\n      });\n  } else {\n    next(action);\n  }\n};\n","export const isPeerConfigObject = async (data) => {\n  if (!Array.isArray(data)) {\n    return Promise.reject(new Error('Incorrect response'));\n  }\n  for (const server of data) {\n    if (typeof server.urls !== 'string' && !Array.isArray(server.urls)) {\n      return Promise.reject(new Error('Incorrect urls in iceServers'));\n    }\n  }\n  try {\n    new RTCPeerConnection(data);\n    return Promise.resolve(data);\n  } catch (error) {\n    return Promise.reject(\n      new Error('Connection instantiation console.error();')\n    );\n  }\n};\n","import { Component } from '@/base';\nimport { Header } from '@/common';\nimport style from './style.module.css';\n\nexport default (headerText, buttons = []) => {\n  const element = new Component('div').element;\n  element.classList.add(style.menu);\n\n  const header = new Header(headerText);\n\n  element.appendChild(header.element);\n  buttons.forEach((button) => element.appendChild(button));\n\n  return element;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"j2362cLf\"};","/**\n * @license\n * Copyright (c) 2023, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\nexport const WHITE = 'w';\nexport const BLACK = 'b';\nexport const PAWN = 'p';\nexport const KNIGHT = 'n';\nexport const BISHOP = 'b';\nexport const ROOK = 'r';\nexport const QUEEN = 'q';\nexport const KING = 'k';\nexport const DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\nconst EMPTY = -1;\nconst FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q',\n};\n// prettier-ignore\nexport const SQUARES = [\n    'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n    'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n    'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n    'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n    'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n    'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n    'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n    'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n];\nconst BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64,\n};\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88 = {\n    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n};\nconst PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15],\n};\nconst PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1],\n};\n// prettier-ignore\nconst ATTACKS = [\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0,\n    0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0,\n    0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0,\n    0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0,\n    0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0,\n    20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20\n];\n// prettier-ignore\nconst RAYS = [\n    17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0,\n    0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0,\n    0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0,\n    0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0,\n    0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0,\n    0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0,\n    0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0,\n    0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0,\n    0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0,\n    -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17\n];\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 };\nconst SYMBOLS = 'pnbrqkPNBRQK';\nconst PROMOTIONS = [KNIGHT, BISHOP, ROOK, QUEEN];\nconst RANK_1 = 7;\nconst RANK_2 = 6;\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1;\nconst RANK_8 = 0;\nconst SIDES = {\n    [KING]: BITS.KSIDE_CASTLE,\n    [QUEEN]: BITS.QSIDE_CASTLE,\n};\nconst ROOKS = {\n    w: [\n        { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n    ],\n    b: [\n        { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n        { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n    ],\n};\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 };\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*'];\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square) {\n    return square >> 4;\n}\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square) {\n    return square & 0xf;\n}\nfunction isDigit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n}\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square) {\n    const f = file(square);\n    const r = rank(square);\n    return ('abcdefgh'.substring(f, f + 1) +\n        '87654321'.substring(r, r + 1));\n}\nfunction swapColor(color) {\n    return color === WHITE ? BLACK : WHITE;\n}\nexport function validateFen(fen) {\n    // 1st criterion: 6 space-seperated fields?\n    const tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: must contain six space-delimited fields',\n        };\n    }\n    // 2nd criterion: move number field is a integer value > 0?\n    const moveNumber = parseInt(tokens[5], 10);\n    if (isNaN(moveNumber) || moveNumber <= 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: move number must be a positive integer',\n        };\n    }\n    // 3rd criterion: half move counter is an integer >= 0?\n    const halfMoves = parseInt(tokens[4], 10);\n    if (isNaN(halfMoves) || halfMoves < 0) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: half move counter number must be a non-negative integer',\n        };\n    }\n    // 4th criterion: 4th field is a valid e.p.-string?\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n        return { ok: false, error: 'Invalid FEN: en-passant square is invalid' };\n    }\n    // 5th criterion: 3th field is a valid castle-string?\n    if (/[^kKqQ-]/.test(tokens[2])) {\n        return { ok: false, error: 'Invalid FEN: castling availability is invalid' };\n    }\n    // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n    if (!/^(w|b)$/.test(tokens[1])) {\n        return { ok: false, error: 'Invalid FEN: side-to-move is invalid' };\n    }\n    // 7th criterion: 1st field contains 8 rows?\n    const rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n        return {\n            ok: false,\n            error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n        };\n    }\n    // 8th criterion: every row is valid?\n    for (let i = 0; i < rows.length; i++) {\n        // check for right sum of fields AND not two numbers in succession\n        let sumFields = 0;\n        let previousWasNumber = false;\n        for (let k = 0; k < rows[i].length; k++) {\n            if (isDigit(rows[i][k])) {\n                if (previousWasNumber) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (consecutive number)',\n                    };\n                }\n                sumFields += parseInt(rows[i][k], 10);\n                previousWasNumber = true;\n            }\n            else {\n                if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                    return {\n                        ok: false,\n                        error: 'Invalid FEN: piece data is invalid (invalid piece)',\n                    };\n                }\n                sumFields += 1;\n                previousWasNumber = false;\n            }\n        }\n        if (sumFields !== 8) {\n            return {\n                ok: false,\n                error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n            };\n        }\n    }\n    // 9th criterion: is en-passant square legal?\n    if ((tokens[3][1] == '3' && tokens[1] == 'w') ||\n        (tokens[3][1] == '6' && tokens[1] == 'b')) {\n        return { ok: false, error: 'Invalid FEN: illegal en-passant square' };\n    }\n    // 10th criterion: does chess position contain exact two kings?\n    const kings = [\n        { color: 'white', regex: /K/g },\n        { color: 'black', regex: /k/g },\n    ];\n    for (const { color, regex } of kings) {\n        if (!regex.test(tokens[0])) {\n            return { ok: false, error: `Invalid FEN: missing ${color} king` };\n        }\n        if ((tokens[0].match(regex) || []).length > 1) {\n            return { ok: false, error: `Invalid FEN: too many ${color} kings` };\n        }\n    }\n    // 11th criterion: are any pawns on the first or eighth rows?\n    if (Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')) {\n        return {\n            ok: false,\n            error: 'Invalid FEN: some pawns are on the edge rows',\n        };\n    }\n    return { ok: true };\n}\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move, moves) {\n    const from = move.from;\n    const to = move.to;\n    const piece = move.piece;\n    let ambiguities = 0;\n    let sameRank = 0;\n    let sameFile = 0;\n    for (let i = 0, len = moves.length; i < len; i++) {\n        const ambigFrom = moves[i].from;\n        const ambigTo = moves[i].to;\n        const ambigPiece = moves[i].piece;\n        /*\n         * if a move of the same piece type ends on the same to square, we'll need\n         * to add a disambiguator to the algebraic notation\n         */\n        if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n            ambiguities++;\n            if (rank(from) === rank(ambigFrom)) {\n                sameRank++;\n            }\n            if (file(from) === file(ambigFrom)) {\n                sameFile++;\n            }\n        }\n    }\n    if (ambiguities > 0) {\n        if (sameRank > 0 && sameFile > 0) {\n            /*\n             * if there exists a similar moving piece on the same rank and file as\n             * the move in question, use the square as the disambiguator\n             */\n            return algebraic(from);\n        }\n        else if (sameFile > 0) {\n            /*\n             * if the moving piece rests on the same file, use the rank symbol as the\n             * disambiguator\n             */\n            return algebraic(from).charAt(1);\n        }\n        else {\n            // else use the file symbol\n            return algebraic(from).charAt(0);\n        }\n    }\n    return '';\n}\nfunction addMove(moves, color, from, to, piece, captured = undefined, flags = BITS.NORMAL) {\n    const r = rank(to);\n    if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n        for (let i = 0; i < PROMOTIONS.length; i++) {\n            const promotion = PROMOTIONS[i];\n            moves.push({\n                color,\n                from,\n                to,\n                piece,\n                captured,\n                promotion,\n                flags: flags | BITS.PROMOTION,\n            });\n        }\n    }\n    else {\n        moves.push({\n            color,\n            from,\n            to,\n            piece,\n            captured,\n            flags,\n        });\n    }\n}\nfunction inferPieceType(san) {\n    let pieceType = san.charAt(0);\n    if (pieceType >= 'a' && pieceType <= 'h') {\n        const matches = san.match(/[a-h]\\d.*[a-h]\\d/);\n        if (matches) {\n            return undefined;\n        }\n        return PAWN;\n    }\n    pieceType = pieceType.toLowerCase();\n    if (pieceType === 'o') {\n        return KING;\n    }\n    return pieceType;\n}\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n}\nfunction trimFen(fen) {\n    /*\n     * remove last two fields in FEN string as they're not needed when checking\n     * for repetition\n     */\n    return fen.split(' ').slice(0, 4).join(' ');\n}\nexport class Chess {\n    _board = new Array(128);\n    _turn = WHITE;\n    _header = {};\n    _kings = { w: EMPTY, b: EMPTY };\n    _epSquare = -1;\n    _halfMoves = 0;\n    _moveNumber = 0;\n    _history = [];\n    _comments = {};\n    _castling = { w: 0, b: 0 };\n    _positionCounts = {};\n    constructor(fen = DEFAULT_POSITION) {\n        this.load(fen);\n    }\n    clear({ preserveHeaders = false } = {}) {\n        this._board = new Array(128);\n        this._kings = { w: EMPTY, b: EMPTY };\n        this._turn = WHITE;\n        this._castling = { w: 0, b: 0 };\n        this._epSquare = EMPTY;\n        this._halfMoves = 0;\n        this._moveNumber = 1;\n        this._history = [];\n        this._comments = {};\n        this._header = preserveHeaders ? this._header : {};\n        /*\n         * Delete the SetUp and FEN headers (if preserved), the board is empty and\n         * these headers don't make sense in this state. They'll get added later\n         * via .load() or .put()\n         */\n        delete this._header['SetUp'];\n        delete this._header['FEN'];\n        /*\n         * Instantiate a proxy that keeps track of position occurrence counts for the purpose\n         * of repetition checking. The getter and setter methods automatically handle trimming\n         * irrelevent information from the fen, initialising new positions, and removing old\n         * positions from the record if their counts are reduced to 0.\n         */\n        this._positionCounts = new Proxy({}, {\n            get: (target, position) => position === 'length'\n                ? Object.keys(target).length // length for unit testing\n                : target?.[trimFen(position)] || 0,\n            set: (target, position, count) => {\n                const trimmedFen = trimFen(position);\n                if (count === 0)\n                    delete target[trimmedFen];\n                else\n                    target[trimmedFen] = count;\n                return true;\n            },\n        });\n    }\n    removeHeader(key) {\n        if (key in this._header) {\n            delete this._header[key];\n        }\n    }\n    load(fen, { skipValidation = false, preserveHeaders = false } = {}) {\n        let tokens = fen.split(/\\s+/);\n        // append commonly omitted fen tokens\n        if (tokens.length >= 2 && tokens.length < 6) {\n            const adjustments = ['-', '-', '0', '1'];\n            fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ');\n        }\n        tokens = fen.split(/\\s+/);\n        if (!skipValidation) {\n            const { ok, error } = validateFen(fen);\n            if (!ok) {\n                throw new Error(error);\n            }\n        }\n        const position = tokens[0];\n        let square = 0;\n        this.clear({ preserveHeaders });\n        for (let i = 0; i < position.length; i++) {\n            const piece = position.charAt(i);\n            if (piece === '/') {\n                square += 8;\n            }\n            else if (isDigit(piece)) {\n                square += parseInt(piece, 10);\n            }\n            else {\n                const color = piece < 'a' ? WHITE : BLACK;\n                this._put({ type: piece.toLowerCase(), color }, algebraic(square));\n                square++;\n            }\n        }\n        this._turn = tokens[1];\n        if (tokens[2].indexOf('K') > -1) {\n            this._castling.w |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            this._castling.w |= BITS.QSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            this._castling.b |= BITS.KSIDE_CASTLE;\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            this._castling.b |= BITS.QSIDE_CASTLE;\n        }\n        this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3]];\n        this._halfMoves = parseInt(tokens[4], 10);\n        this._moveNumber = parseInt(tokens[5], 10);\n        this._updateSetup(fen);\n        this._positionCounts[fen]++;\n    }\n    fen() {\n        let empty = 0;\n        let fen = '';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i]) {\n                if (empty > 0) {\n                    fen += empty;\n                    empty = 0;\n                }\n                const { color, type: piece } = this._board[i];\n                fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n            }\n            else {\n                empty++;\n            }\n            if ((i + 1) & 0x88) {\n                if (empty > 0) {\n                    fen += empty;\n                }\n                if (i !== Ox88.h1) {\n                    fen += '/';\n                }\n                empty = 0;\n                i += 8;\n            }\n        }\n        let castling = '';\n        if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n            castling += 'K';\n        }\n        if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n            castling += 'Q';\n        }\n        if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n            castling += 'k';\n        }\n        if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n            castling += 'q';\n        }\n        // do we have an empty castling flag?\n        castling = castling || '-';\n        let epSquare = '-';\n        /*\n         * only print the ep square if en passant is a valid move (pawn is present\n         * and ep capture is not pinned)\n         */\n        if (this._epSquare !== EMPTY) {\n            const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n            const squares = [bigPawnSquare + 1, bigPawnSquare - 1];\n            for (const square of squares) {\n                // is the square off the board?\n                if (square & 0x88) {\n                    continue;\n                }\n                const color = this._turn;\n                // is there a pawn that can capture the epSquare?\n                if (this._board[square]?.color === color &&\n                    this._board[square]?.type === PAWN) {\n                    // if the pawn makes an ep capture, does it leave it's king in check?\n                    this._makeMove({\n                        color,\n                        from: square,\n                        to: this._epSquare,\n                        piece: PAWN,\n                        captured: PAWN,\n                        flags: BITS.EP_CAPTURE,\n                    });\n                    const isLegal = !this._isKingAttacked(color);\n                    this._undoMove();\n                    // if ep is legal, break and set the ep square in the FEN output\n                    if (isLegal) {\n                        epSquare = algebraic(this._epSquare);\n                        break;\n                    }\n                }\n            }\n        }\n        return [\n            fen,\n            this._turn,\n            castling,\n            epSquare,\n            this._halfMoves,\n            this._moveNumber,\n        ].join(' ');\n    }\n    /*\n     * Called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object. If the FEN\n     * is equal to the default position, the SetUp and FEN are deleted the setup\n     * is only updated if history.length is zero, ie moves haven't been made.\n     */\n    _updateSetup(fen) {\n        if (this._history.length > 0)\n            return;\n        if (fen !== DEFAULT_POSITION) {\n            this._header['SetUp'] = '1';\n            this._header['FEN'] = fen;\n        }\n        else {\n            delete this._header['SetUp'];\n            delete this._header['FEN'];\n        }\n    }\n    reset() {\n        this.load(DEFAULT_POSITION);\n    }\n    get(square) {\n        return this._board[Ox88[square]] || false;\n    }\n    put({ type, color }, square) {\n        if (this._put({ type, color }, square)) {\n            this._updateCastlingRights();\n            this._updateEnPassantSquare();\n            this._updateSetup(this.fen());\n            return true;\n        }\n        return false;\n    }\n    _put({ type, color }, square) {\n        // check for piece\n        if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n            return false;\n        }\n        // check for valid square\n        if (!(square in Ox88)) {\n            return false;\n        }\n        const sq = Ox88[square];\n        // don't let the user place more than one king\n        if (type == KING &&\n            !(this._kings[color] == EMPTY || this._kings[color] == sq)) {\n            return false;\n        }\n        const currentPieceOnSquare = this._board[sq];\n        // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n        if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n            this._kings[currentPieceOnSquare.color] = EMPTY;\n        }\n        this._board[sq] = { type: type, color: color };\n        if (type === KING) {\n            this._kings[color] = sq;\n        }\n        return true;\n    }\n    remove(square) {\n        const piece = this.get(square);\n        delete this._board[Ox88[square]];\n        if (piece && piece.type === KING) {\n            this._kings[piece.color] = EMPTY;\n        }\n        this._updateCastlingRights();\n        this._updateEnPassantSquare();\n        this._updateSetup(this.fen());\n        return piece;\n    }\n    _updateCastlingRights() {\n        const whiteKingInPlace = this._board[Ox88.e1]?.type === KING &&\n            this._board[Ox88.e1]?.color === WHITE;\n        const blackKingInPlace = this._board[Ox88.e8]?.type === KING &&\n            this._board[Ox88.e8]?.color === BLACK;\n        if (!whiteKingInPlace ||\n            this._board[Ox88.a1]?.type !== ROOK ||\n            this._board[Ox88.a1]?.color !== WHITE) {\n            this._castling.w &= ~BITS.QSIDE_CASTLE;\n        }\n        if (!whiteKingInPlace ||\n            this._board[Ox88.h1]?.type !== ROOK ||\n            this._board[Ox88.h1]?.color !== WHITE) {\n            this._castling.w &= ~BITS.KSIDE_CASTLE;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.a8]?.type !== ROOK ||\n            this._board[Ox88.a8]?.color !== BLACK) {\n            this._castling.b &= ~BITS.QSIDE_CASTLE;\n        }\n        if (!blackKingInPlace ||\n            this._board[Ox88.h8]?.type !== ROOK ||\n            this._board[Ox88.h8]?.color !== BLACK) {\n            this._castling.b &= ~BITS.KSIDE_CASTLE;\n        }\n    }\n    _updateEnPassantSquare() {\n        if (this._epSquare === EMPTY) {\n            return;\n        }\n        const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16);\n        const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16);\n        const attackers = [currentSquare + 1, currentSquare - 1];\n        if (this._board[startSquare] !== null ||\n            this._board[this._epSquare] !== null ||\n            this._board[currentSquare]?.color !== swapColor(this._turn) ||\n            this._board[currentSquare]?.type !== PAWN) {\n            this._epSquare = EMPTY;\n            return;\n        }\n        const canCapture = (square) => !(square & 0x88) &&\n            this._board[square]?.color === this._turn &&\n            this._board[square]?.type === PAWN;\n        if (!attackers.some(canCapture)) {\n            this._epSquare = EMPTY;\n        }\n    }\n    _attacked(color, square) {\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // did we run off the end of the board\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            // if empty square or wrong color\n            if (this._board[i] === undefined || this._board[i].color !== color) {\n                continue;\n            }\n            const piece = this._board[i];\n            const difference = i - square;\n            // skip - to/from square are the same\n            if (difference === 0) {\n                continue;\n            }\n            const index = difference + 119;\n            if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n                if (piece.type === PAWN) {\n                    if (difference > 0) {\n                        if (piece.color === WHITE)\n                            return true;\n                    }\n                    else {\n                        if (piece.color === BLACK)\n                            return true;\n                    }\n                    continue;\n                }\n                // if the piece is a knight or a king\n                if (piece.type === 'n' || piece.type === 'k')\n                    return true;\n                const offset = RAYS[index];\n                let j = i + offset;\n                let blocked = false;\n                while (j !== square) {\n                    if (this._board[j] != null) {\n                        blocked = true;\n                        break;\n                    }\n                    j += offset;\n                }\n                if (!blocked)\n                    return true;\n            }\n        }\n        return false;\n    }\n    _isKingAttacked(color) {\n        const square = this._kings[color];\n        return square === -1 ? false : this._attacked(swapColor(color), square);\n    }\n    isAttacked(square, attackedBy) {\n        return this._attacked(attackedBy, Ox88[square]);\n    }\n    isCheck() {\n        return this._isKingAttacked(this._turn);\n    }\n    inCheck() {\n        return this.isCheck();\n    }\n    isCheckmate() {\n        return this.isCheck() && this._moves().length === 0;\n    }\n    isStalemate() {\n        return !this.isCheck() && this._moves().length === 0;\n    }\n    isInsufficientMaterial() {\n        /*\n         * k.b. vs k.b. (of opposite colors) with mate in 1:\n         * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n         *\n         * k.b. vs k.n. with mate in 1:\n         * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n         */\n        const pieces = {\n            b: 0,\n            n: 0,\n            r: 0,\n            q: 0,\n            k: 0,\n            p: 0,\n        };\n        const bishops = [];\n        let numPieces = 0;\n        let squareColor = 0;\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            squareColor = (squareColor + 1) % 2;\n            if (i & 0x88) {\n                i += 7;\n                continue;\n            }\n            const piece = this._board[i];\n            if (piece) {\n                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n                if (piece.type === BISHOP) {\n                    bishops.push(squareColor);\n                }\n                numPieces++;\n            }\n        }\n        // k vs. k\n        if (numPieces === 2) {\n            return true;\n        }\n        else if (\n        // k vs. kn .... or .... k vs. kb\n        numPieces === 3 &&\n            (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n            return true;\n        }\n        else if (numPieces === pieces[BISHOP] + 2) {\n            // kb vs. kb where any number of bishops are all on the same color\n            let sum = 0;\n            const len = bishops.length;\n            for (let i = 0; i < len; i++) {\n                sum += bishops[i];\n            }\n            if (sum === 0 || sum === len) {\n                return true;\n            }\n        }\n        return false;\n    }\n    _getRepetitionCount() {\n        return this._positionCounts[this.fen()];\n    }\n    isThreefoldRepetition() {\n        return this._getRepetitionCount() >= 3;\n    }\n    isDraw() {\n        return (this._halfMoves >= 100 || // 50 moves per side = 100 half moves\n            this.isStalemate() ||\n            this.isInsufficientMaterial() ||\n            this.isThreefoldRepetition());\n    }\n    isGameOver() {\n        return this.isCheckmate() || this.isStalemate() || this.isDraw();\n    }\n    moves({ verbose = false, square = undefined, piece = undefined, } = {}) {\n        const moves = this._moves({ square, piece });\n        if (verbose) {\n            return moves.map((move) => this._makePretty(move));\n        }\n        else {\n            return moves.map((move) => this._moveToSan(move, moves));\n        }\n    }\n    _moves({ legal = true, piece = undefined, square = undefined, } = {}) {\n        const forSquare = square ? square.toLowerCase() : undefined;\n        const forPiece = piece?.toLowerCase();\n        const moves = [];\n        const us = this._turn;\n        const them = swapColor(us);\n        let firstSquare = Ox88.a8;\n        let lastSquare = Ox88.h1;\n        let singleSquare = false;\n        // are we generating moves for a single square?\n        if (forSquare) {\n            // illegal square, return empty moves\n            if (!(forSquare in Ox88)) {\n                return [];\n            }\n            else {\n                firstSquare = lastSquare = Ox88[forSquare];\n                singleSquare = true;\n            }\n        }\n        for (let from = firstSquare; from <= lastSquare; from++) {\n            // did we run off the end of the board\n            if (from & 0x88) {\n                from += 7;\n                continue;\n            }\n            // empty square or opponent, skip\n            if (!this._board[from] || this._board[from].color === them) {\n                continue;\n            }\n            const { type } = this._board[from];\n            let to;\n            if (type === PAWN) {\n                if (forPiece && forPiece !== type)\n                    continue;\n                // single square, non-capturing\n                to = from + PAWN_OFFSETS[us][0];\n                if (!this._board[to]) {\n                    addMove(moves, us, from, to, PAWN);\n                    // double square\n                    to = from + PAWN_OFFSETS[us][1];\n                    if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n                        addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN);\n                    }\n                }\n                // pawn captures\n                for (let j = 2; j < 4; j++) {\n                    to = from + PAWN_OFFSETS[us][j];\n                    if (to & 0x88)\n                        continue;\n                    if (this._board[to]?.color === them) {\n                        addMove(moves, us, from, to, PAWN, this._board[to].type, BITS.CAPTURE);\n                    }\n                    else if (to === this._epSquare) {\n                        addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE);\n                    }\n                }\n            }\n            else {\n                if (forPiece && forPiece !== type)\n                    continue;\n                for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n                    const offset = PIECE_OFFSETS[type][j];\n                    to = from;\n                    while (true) {\n                        to += offset;\n                        if (to & 0x88)\n                            break;\n                        if (!this._board[to]) {\n                            addMove(moves, us, from, to, type);\n                        }\n                        else {\n                            // own color, stop loop\n                            if (this._board[to].color === us)\n                                break;\n                            addMove(moves, us, from, to, type, this._board[to].type, BITS.CAPTURE);\n                            break;\n                        }\n                        /* break, if knight or king */\n                        if (type === KNIGHT || type === KING)\n                            break;\n                    }\n                }\n            }\n        }\n        /*\n         * check for castling if we're:\n         *   a) generating all moves, or\n         *   b) doing single square move generation on the king's square\n         */\n        if (forPiece === undefined || forPiece === KING) {\n            if (!singleSquare || lastSquare === this._kings[us]) {\n                // king-side castling\n                if (this._castling[us] & BITS.KSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom + 2;\n                    if (!this._board[castlingFrom + 1] &&\n                        !this._board[castlingTo] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom + 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.KSIDE_CASTLE);\n                    }\n                }\n                // queen-side castling\n                if (this._castling[us] & BITS.QSIDE_CASTLE) {\n                    const castlingFrom = this._kings[us];\n                    const castlingTo = castlingFrom - 2;\n                    if (!this._board[castlingFrom - 1] &&\n                        !this._board[castlingFrom - 2] &&\n                        !this._board[castlingFrom - 3] &&\n                        !this._attacked(them, this._kings[us]) &&\n                        !this._attacked(them, castlingFrom - 1) &&\n                        !this._attacked(them, castlingTo)) {\n                        addMove(moves, us, this._kings[us], castlingTo, KING, undefined, BITS.QSIDE_CASTLE);\n                    }\n                }\n            }\n        }\n        /*\n         * return all pseudo-legal moves (this includes moves that allow the king\n         * to be captured)\n         */\n        if (!legal || this._kings[us] === -1) {\n            return moves;\n        }\n        // filter out illegal moves\n        const legalMoves = [];\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(us)) {\n                legalMoves.push(moves[i]);\n            }\n            this._undoMove();\n        }\n        return legalMoves;\n    }\n    move(move, { strict = false } = {}) {\n        /*\n         * The move function can be called with in the following parameters:\n         *\n         * .move('Nxb7')       <- argument is a case-sensitive SAN string\n         *\n         * .move({ from: 'h7', <- argument is a move object\n         *         to :'h8',\n         *         promotion: 'q' })\n         *\n         *\n         * An optional strict argument may be supplied to tell chess.js to\n         * strictly follow the SAN specification.\n         */\n        let moveObj = null;\n        if (typeof move === 'string') {\n            moveObj = this._moveFromSan(move, strict);\n        }\n        else if (typeof move === 'object') {\n            const moves = this._moves();\n            // convert the pretty move object to an ugly move object\n            for (let i = 0, len = moves.length; i < len; i++) {\n                if (move.from === algebraic(moves[i].from) &&\n                    move.to === algebraic(moves[i].to) &&\n                    (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)) {\n                    moveObj = moves[i];\n                    break;\n                }\n            }\n        }\n        // failed to find move\n        if (!moveObj) {\n            if (typeof move === 'string') {\n                throw new Error(`Invalid move: ${move}`);\n            }\n            else {\n                throw new Error(`Invalid move: ${JSON.stringify(move)}`);\n            }\n        }\n        /*\n         * need to make a copy of move because we can't generate SAN after the move\n         * is made\n         */\n        const prettyMove = this._makePretty(moveObj);\n        this._makeMove(moveObj);\n        this._positionCounts[prettyMove.after]++;\n        return prettyMove;\n    }\n    _push(move) {\n        this._history.push({\n            move,\n            kings: { b: this._kings.b, w: this._kings.w },\n            turn: this._turn,\n            castling: { b: this._castling.b, w: this._castling.w },\n            epSquare: this._epSquare,\n            halfMoves: this._halfMoves,\n            moveNumber: this._moveNumber,\n        });\n    }\n    _makeMove(move) {\n        const us = this._turn;\n        const them = swapColor(us);\n        this._push(move);\n        this._board[move.to] = this._board[move.from];\n        delete this._board[move.from];\n        // if ep capture, remove the captured pawn\n        if (move.flags & BITS.EP_CAPTURE) {\n            if (this._turn === BLACK) {\n                delete this._board[move.to - 16];\n            }\n            else {\n                delete this._board[move.to + 16];\n            }\n        }\n        // if pawn promotion, replace with new piece\n        if (move.promotion) {\n            this._board[move.to] = { type: move.promotion, color: us };\n        }\n        // if we moved the king\n        if (this._board[move.to].type === KING) {\n            this._kings[us] = move.to;\n            // if we castled, move the rook next to the king\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                const castlingTo = move.to - 1;\n                const castlingFrom = move.to + 1;\n                this._board[castlingTo] = this._board[castlingFrom];\n                delete this._board[castlingFrom];\n            }\n            else if (move.flags & BITS.QSIDE_CASTLE) {\n                const castlingTo = move.to + 1;\n                const castlingFrom = move.to - 2;\n                this._board[castlingTo] = this._board[castlingFrom];\n                delete this._board[castlingFrom];\n            }\n            // turn off castling\n            this._castling[us] = 0;\n        }\n        // turn off castling if we move a rook\n        if (this._castling[us]) {\n            for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n                if (move.from === ROOKS[us][i].square &&\n                    this._castling[us] & ROOKS[us][i].flag) {\n                    this._castling[us] ^= ROOKS[us][i].flag;\n                    break;\n                }\n            }\n        }\n        // turn off castling if we capture a rook\n        if (this._castling[them]) {\n            for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n                if (move.to === ROOKS[them][i].square &&\n                    this._castling[them] & ROOKS[them][i].flag) {\n                    this._castling[them] ^= ROOKS[them][i].flag;\n                    break;\n                }\n            }\n        }\n        // if big pawn move, update the en passant square\n        if (move.flags & BITS.BIG_PAWN) {\n            if (us === BLACK) {\n                this._epSquare = move.to - 16;\n            }\n            else {\n                this._epSquare = move.to + 16;\n            }\n        }\n        else {\n            this._epSquare = EMPTY;\n        }\n        // reset the 50 move counter if a pawn is moved or a piece is captured\n        if (move.piece === PAWN) {\n            this._halfMoves = 0;\n        }\n        else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n            this._halfMoves = 0;\n        }\n        else {\n            this._halfMoves++;\n        }\n        if (us === BLACK) {\n            this._moveNumber++;\n        }\n        this._turn = them;\n    }\n    undo() {\n        const move = this._undoMove();\n        if (move) {\n            const prettyMove = this._makePretty(move);\n            this._positionCounts[prettyMove.after]--;\n            return prettyMove;\n        }\n        return null;\n    }\n    _undoMove() {\n        const old = this._history.pop();\n        if (old === undefined) {\n            return null;\n        }\n        const move = old.move;\n        this._kings = old.kings;\n        this._turn = old.turn;\n        this._castling = old.castling;\n        this._epSquare = old.epSquare;\n        this._halfMoves = old.halfMoves;\n        this._moveNumber = old.moveNumber;\n        const us = this._turn;\n        const them = swapColor(us);\n        this._board[move.from] = this._board[move.to];\n        this._board[move.from].type = move.piece; // to undo any promotions\n        delete this._board[move.to];\n        if (move.captured) {\n            if (move.flags & BITS.EP_CAPTURE) {\n                // en passant capture\n                let index;\n                if (us === BLACK) {\n                    index = move.to - 16;\n                }\n                else {\n                    index = move.to + 16;\n                }\n                this._board[index] = { type: PAWN, color: them };\n            }\n            else {\n                // regular capture\n                this._board[move.to] = { type: move.captured, color: them };\n            }\n        }\n        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n            let castlingTo, castlingFrom;\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                castlingTo = move.to + 1;\n                castlingFrom = move.to - 1;\n            }\n            else {\n                castlingTo = move.to - 2;\n                castlingFrom = move.to + 1;\n            }\n            this._board[castlingTo] = this._board[castlingFrom];\n            delete this._board[castlingFrom];\n        }\n        return move;\n    }\n    pgn({ newline = '\\n', maxWidth = 0, } = {}) {\n        /*\n         * using the specification from http://www.chessclub.com/help/PGN-spec\n         * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n         */\n        const result = [];\n        let headerExists = false;\n        /* add the PGN header information */\n        for (const i in this._header) {\n            /*\n             * TODO: order of enumerated properties in header object is not\n             * guaranteed, see ECMA-262 spec (section 12.6.4)\n             */\n            result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline);\n            headerExists = true;\n        }\n        if (headerExists && this._history.length) {\n            result.push(newline);\n        }\n        const appendComment = (moveString) => {\n            const comment = this._comments[this.fen()];\n            if (typeof comment !== 'undefined') {\n                const delimiter = moveString.length > 0 ? ' ' : '';\n                moveString = `${moveString}${delimiter}{${comment}}`;\n            }\n            return moveString;\n        };\n        // pop all of history onto reversed_history\n        const reversedHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        const moves = [];\n        let moveString = '';\n        // special case of a commented starting position with no moves\n        if (reversedHistory.length === 0) {\n            moves.push(appendComment(''));\n        }\n        // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n        while (reversedHistory.length > 0) {\n            moveString = appendComment(moveString);\n            const move = reversedHistory.pop();\n            // make TypeScript stop complaining about move being undefined\n            if (!move) {\n                break;\n            }\n            // if the position started with black to move, start PGN with #. ...\n            if (!this._history.length && move.color === 'b') {\n                const prefix = `${this._moveNumber}. ...`;\n                // is there a comment preceding the first move?\n                moveString = moveString ? `${moveString} ${prefix}` : prefix;\n            }\n            else if (move.color === 'w') {\n                // store the previous generated move_string if we have one\n                if (moveString.length) {\n                    moves.push(moveString);\n                }\n                moveString = this._moveNumber + '.';\n            }\n            moveString =\n                moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }));\n            this._makeMove(move);\n        }\n        // are there any other leftover moves?\n        if (moveString.length) {\n            moves.push(appendComment(moveString));\n        }\n        // is there a result?\n        if (typeof this._header.Result !== 'undefined') {\n            moves.push(this._header.Result);\n        }\n        /*\n         * history should be back to what it was before we started generating PGN,\n         * so join together moves\n         */\n        if (maxWidth === 0) {\n            return result.join('') + moves.join(' ');\n        }\n        // TODO (jah): huh?\n        const strip = function () {\n            if (result.length > 0 && result[result.length - 1] === ' ') {\n                result.pop();\n                return true;\n            }\n            return false;\n        };\n        // NB: this does not preserve comment whitespace.\n        const wrapComment = function (width, move) {\n            for (const token of move.split(' ')) {\n                if (!token) {\n                    continue;\n                }\n                if (width + token.length > maxWidth) {\n                    while (strip()) {\n                        width--;\n                    }\n                    result.push(newline);\n                    width = 0;\n                }\n                result.push(token);\n                width += token.length;\n                result.push(' ');\n                width++;\n            }\n            if (strip()) {\n                width--;\n            }\n            return width;\n        };\n        // wrap the PGN output at max_width\n        let currentWidth = 0;\n        for (let i = 0; i < moves.length; i++) {\n            if (currentWidth + moves[i].length > maxWidth) {\n                if (moves[i].includes('{')) {\n                    currentWidth = wrapComment(currentWidth, moves[i]);\n                    continue;\n                }\n            }\n            // if the current move will push past max_width\n            if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n                // don't end the line with whitespace\n                if (result[result.length - 1] === ' ') {\n                    result.pop();\n                }\n                result.push(newline);\n                currentWidth = 0;\n            }\n            else if (i !== 0) {\n                result.push(' ');\n                currentWidth++;\n            }\n            result.push(moves[i]);\n            currentWidth += moves[i].length;\n        }\n        return result.join('');\n    }\n    header(...args) {\n        for (let i = 0; i < args.length; i += 2) {\n            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n                this._header[args[i]] = args[i + 1];\n            }\n        }\n        return this._header;\n    }\n    loadPgn(pgn, { strict = false, newlineChar = '\\r?\\n', } = {}) {\n        function mask(str) {\n            return str.replace(/\\\\/g, '\\\\');\n        }\n        function parsePgnHeader(header) {\n            const headerObj = {};\n            const headers = header.split(new RegExp(mask(newlineChar)));\n            let key = '';\n            let value = '';\n            for (let i = 0; i < headers.length; i++) {\n                const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/;\n                key = headers[i].replace(regex, '$1');\n                value = headers[i].replace(regex, '$2');\n                if (key.trim().length > 0) {\n                    headerObj[key] = value;\n                }\n            }\n            return headerObj;\n        }\n        // strip whitespace from head/tail of PGN block\n        pgn = pgn.trim();\n        /*\n         * RegExp to split header. Takes advantage of the fact that header and movetext\n         * will always have a blank line between them (ie, two newline_char's). Handles\n         * case where movetext is empty by matching newlineChar until end of string is\n         * matched - effectively trimming from the end extra newlineChar.\n         *\n         * With default newline_char, will equal:\n         * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n         */\n        const headerRegex = new RegExp('^(\\\\[((?:' +\n            mask(newlineChar) +\n            ')|.)*\\\\])' +\n            '((?:\\\\s*' +\n            mask(newlineChar) +\n            '){2}|(?:\\\\s*' +\n            mask(newlineChar) +\n            ')*$)');\n        // If no header given, begin with moves.\n        const headerRegexResults = headerRegex.exec(pgn);\n        const headerString = headerRegexResults\n            ? headerRegexResults.length >= 2\n                ? headerRegexResults[1]\n                : ''\n            : '';\n        // Put the board in the starting position\n        this.reset();\n        // parse PGN header\n        const headers = parsePgnHeader(headerString);\n        let fen = '';\n        for (const key in headers) {\n            // check to see user is including fen (possibly with wrong tag case)\n            if (key.toLowerCase() === 'fen') {\n                fen = headers[key];\n            }\n            this.header(key, headers[key]);\n        }\n        /*\n         * the permissive parser should attempt to load a fen tag, even if it's the\n         * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n         */\n        if (!strict) {\n            if (fen) {\n                this.load(fen, { preserveHeaders: true });\n            }\n        }\n        else {\n            /*\n             * strict parser - load the starting position indicated by [Setup '1']\n             * and [FEN position]\n             */\n            if (headers['SetUp'] === '1') {\n                if (!('FEN' in headers)) {\n                    throw new Error('Invalid PGN: FEN tag must be supplied with SetUp tag');\n                }\n                // don't clear the headers when loading\n                this.load(headers['FEN'], { preserveHeaders: true });\n            }\n        }\n        /*\n         * NB: the regexes below that delete move numbers, recursive annotations,\n         * and numeric annotation glyphs may also match text in comments. To\n         * prevent this, we transform comments by hex-encoding them in place and\n         * decoding them again after the other tokens have been deleted.\n         *\n         * While the spec states that PGN files should be ASCII encoded, we use\n         * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n         * for modern users\n         */\n        function toHex(s) {\n            return Array.from(s)\n                .map(function (c) {\n                /*\n                 * encodeURI doesn't transform most ASCII characters, so we handle\n                 * these ourselves\n                 */\n                return c.charCodeAt(0) < 128\n                    ? c.charCodeAt(0).toString(16)\n                    : encodeURIComponent(c).replace(/%/g, '').toLowerCase();\n            })\n                .join('');\n        }\n        function fromHex(s) {\n            return s.length == 0\n                ? ''\n                : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'));\n        }\n        const encodeComment = function (s) {\n            s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ');\n            return `{${toHex(s.slice(1, s.length - 1))}}`;\n        };\n        const decodeComment = function (s) {\n            if (s.startsWith('{') && s.endsWith('}')) {\n                return fromHex(s.slice(1, s.length - 1));\n            }\n        };\n        // delete header to get the moves\n        let ms = pgn\n            .replace(headerString, '')\n            .replace(\n        // encode comments so they don't get deleted below\n        new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'), function (_match, bracket, semicolon) {\n            return bracket !== undefined\n                ? encodeComment(bracket)\n                : ' ' + encodeComment(`{${semicolon.slice(1)}}`);\n        })\n            .replace(new RegExp(mask(newlineChar), 'g'), ' ');\n        // delete recursive annotation variations\n        const ravRegex = /(\\([^()]+\\))+?/g;\n        while (ravRegex.test(ms)) {\n            ms = ms.replace(ravRegex, '');\n        }\n        // delete move numbers\n        ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n        // delete ... indicating black to move\n        ms = ms.replace(/\\.\\.\\./g, '');\n        /* delete numeric annotation glyphs */\n        ms = ms.replace(/\\$\\d+/g, '');\n        // trim and get array of moves\n        let moves = ms.trim().split(new RegExp(/\\s+/));\n        // delete empty entries\n        moves = moves.filter((move) => move !== '');\n        let result = '';\n        for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n            const comment = decodeComment(moves[halfMove]);\n            if (comment !== undefined) {\n                this._comments[this.fen()] = comment;\n                continue;\n            }\n            const move = this._moveFromSan(moves[halfMove], strict);\n            // invalid move\n            if (move == null) {\n                // was the move an end of game marker\n                if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n                    result = moves[halfMove];\n                }\n                else {\n                    throw new Error(`Invalid move in PGN: ${moves[halfMove]}`);\n                }\n            }\n            else {\n                // reset the end of game marker if making a valid move\n                result = '';\n                this._makeMove(move);\n                this._positionCounts[this.fen()]++;\n            }\n        }\n        /*\n         * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n         * the termination marker. Only do this when headers are present, but the\n         * result tag is missing\n         */\n        if (result && Object.keys(this._header).length && !this._header['Result']) {\n            this.header('Result', result);\n        }\n    }\n    /*\n     * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} strict Use the strict SAN parser. It will throw errors\n     * on overly disambiguated moves (see below):\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n    _moveToSan(move, moves) {\n        let output = '';\n        if (move.flags & BITS.KSIDE_CASTLE) {\n            output = 'O-O';\n        }\n        else if (move.flags & BITS.QSIDE_CASTLE) {\n            output = 'O-O-O';\n        }\n        else {\n            if (move.piece !== PAWN) {\n                const disambiguator = getDisambiguator(move, moves);\n                output += move.piece.toUpperCase() + disambiguator;\n            }\n            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n                if (move.piece === PAWN) {\n                    output += algebraic(move.from)[0];\n                }\n                output += 'x';\n            }\n            output += algebraic(move.to);\n            if (move.promotion) {\n                output += '=' + move.promotion.toUpperCase();\n            }\n        }\n        this._makeMove(move);\n        if (this.isCheck()) {\n            if (this.isCheckmate()) {\n                output += '#';\n            }\n            else {\n                output += '+';\n            }\n        }\n        this._undoMove();\n        return output;\n    }\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n    _moveFromSan(move, strict = false) {\n        // strip off any move decorations: e.g Nf3+?! becomes Nf3\n        const cleanMove = strippedSan(move);\n        let pieceType = inferPieceType(cleanMove);\n        let moves = this._moves({ legal: true, piece: pieceType });\n        // strict parser\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n                return moves[i];\n            }\n        }\n        // the strict parser failed\n        if (strict) {\n            return null;\n        }\n        let piece = undefined;\n        let matches = undefined;\n        let from = undefined;\n        let to = undefined;\n        let promotion = undefined;\n        /*\n         * The default permissive (non-strict) parser allows the user to parse\n         * non-standard chess notations. This parser is only run after the strict\n         * Standard Algebraic Notation (SAN) parser has failed.\n         *\n         * When running the permissive parser, we'll run a regex to grab the piece, the\n         * to/from square, and an optional promotion piece. This regex will\n         * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n         * f7f8q, b1c3\n         *\n         * NOTE: Some positions and moves may be ambiguous when using the permissive\n         * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n         * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n         * move). In these cases, the permissive parser will default to the most\n         * basic interpretation (which is b1c3 parsing to Nc3).\n         */\n        let overlyDisambiguated = false;\n        matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n        if (matches) {\n            piece = matches[1];\n            from = matches[2];\n            to = matches[3];\n            promotion = matches[4];\n            if (from.length == 1) {\n                overlyDisambiguated = true;\n            }\n        }\n        else {\n            /*\n             * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n             * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n             * there is one legal knight move to e7). In this case, the value of\n             * 'from' variable will be a rank or file, not a square.\n             */\n            matches = cleanMove.match(/([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/);\n            if (matches) {\n                piece = matches[1];\n                from = matches[2];\n                to = matches[3];\n                promotion = matches[4];\n                if (from.length == 1) {\n                    overlyDisambiguated = true;\n                }\n            }\n        }\n        pieceType = inferPieceType(cleanMove);\n        moves = this._moves({\n            legal: true,\n            piece: piece ? piece : pieceType,\n        });\n        if (!to) {\n            return null;\n        }\n        for (let i = 0, len = moves.length; i < len; i++) {\n            if (!from) {\n                // if there is no from square, it could be just 'x' missing from a capture\n                if (cleanMove ===\n                    strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')) {\n                    return moves[i];\n                }\n                // hand-compare move properties with the results from our permissive regex\n            }\n            else if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                Ox88[from] == moves[i].from &&\n                Ox88[to] == moves[i].to &&\n                (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                return moves[i];\n            }\n            else if (overlyDisambiguated) {\n                /*\n                 * SPECIAL CASE: we parsed a move string that may have an unneeded\n                 * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n                 */\n                const square = algebraic(moves[i].from);\n                if ((!piece || piece.toLowerCase() == moves[i].piece) &&\n                    Ox88[to] == moves[i].to &&\n                    (from == square[0] || from == square[1]) &&\n                    (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n                    return moves[i];\n                }\n            }\n        }\n        return null;\n    }\n    ascii() {\n        let s = '   +------------------------+\\n';\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            // display the rank\n            if (file(i) === 0) {\n                s += ' ' + '87654321'[rank(i)] + ' |';\n            }\n            if (this._board[i]) {\n                const piece = this._board[i].type;\n                const color = this._board[i].color;\n                const symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n                s += ' ' + symbol + ' ';\n            }\n            else {\n                s += ' . ';\n            }\n            if ((i + 1) & 0x88) {\n                s += '|\\n';\n                i += 8;\n            }\n        }\n        s += '   +------------------------+\\n';\n        s += '     a  b  c  d  e  f  g  h';\n        return s;\n    }\n    perft(depth) {\n        const moves = this._moves({ legal: false });\n        let nodes = 0;\n        const color = this._turn;\n        for (let i = 0, len = moves.length; i < len; i++) {\n            this._makeMove(moves[i]);\n            if (!this._isKingAttacked(color)) {\n                if (depth - 1 > 0) {\n                    nodes += this.perft(depth - 1);\n                }\n                else {\n                    nodes++;\n                }\n            }\n            this._undoMove();\n        }\n        return nodes;\n    }\n    // pretty = external move object\n    _makePretty(uglyMove) {\n        const { color, piece, from, to, flags, captured, promotion } = uglyMove;\n        let prettyFlags = '';\n        for (const flag in BITS) {\n            if (BITS[flag] & flags) {\n                prettyFlags += FLAGS[flag];\n            }\n        }\n        const fromAlgebraic = algebraic(from);\n        const toAlgebraic = algebraic(to);\n        const move = {\n            color,\n            piece,\n            from: fromAlgebraic,\n            to: toAlgebraic,\n            san: this._moveToSan(uglyMove, this._moves({ legal: true })),\n            flags: prettyFlags,\n            lan: fromAlgebraic + toAlgebraic,\n            before: this.fen(),\n            after: '',\n        };\n        // generate the FEN for the 'after' key\n        this._makeMove(uglyMove);\n        move.after = this.fen();\n        this._undoMove();\n        if (captured) {\n            move.captured = captured;\n        }\n        if (promotion) {\n            move.promotion = promotion;\n            move.lan += promotion;\n        }\n        return move;\n    }\n    turn() {\n        return this._turn;\n    }\n    board() {\n        const output = [];\n        let row = [];\n        for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n            if (this._board[i] == null) {\n                row.push(null);\n            }\n            else {\n                row.push({\n                    square: algebraic(i),\n                    type: this._board[i].type,\n                    color: this._board[i].color,\n                });\n            }\n            if ((i + 1) & 0x88) {\n                output.push(row);\n                row = [];\n                i += 8;\n            }\n        }\n        return output;\n    }\n    squareColor(square) {\n        if (square in Ox88) {\n            const sq = Ox88[square];\n            return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark';\n        }\n        return null;\n    }\n    history({ verbose = false } = {}) {\n        const reversedHistory = [];\n        const moveHistory = [];\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            if (verbose) {\n                moveHistory.push(this._makePretty(move));\n            }\n            else {\n                moveHistory.push(this._moveToSan(move, this._moves()));\n            }\n            this._makeMove(move);\n        }\n        return moveHistory;\n    }\n    _pruneComments() {\n        const reversedHistory = [];\n        const currentComments = {};\n        const copyComment = (fen) => {\n            if (fen in this._comments) {\n                currentComments[fen] = this._comments[fen];\n            }\n        };\n        while (this._history.length > 0) {\n            reversedHistory.push(this._undoMove());\n        }\n        copyComment(this.fen());\n        while (true) {\n            const move = reversedHistory.pop();\n            if (!move) {\n                break;\n            }\n            this._makeMove(move);\n            copyComment(this.fen());\n        }\n        this._comments = currentComments;\n    }\n    getComment() {\n        return this._comments[this.fen()];\n    }\n    setComment(comment) {\n        this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']');\n    }\n    deleteComment() {\n        const comment = this._comments[this.fen()];\n        delete this._comments[this.fen()];\n        return comment;\n    }\n    getComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            return { fen: fen, comment: this._comments[fen] };\n        });\n    }\n    deleteComments() {\n        this._pruneComments();\n        return Object.keys(this._comments).map((fen) => {\n            const comment = this._comments[fen];\n            delete this._comments[fen];\n            return { fen: fen, comment: comment };\n        });\n    }\n    setCastlingRights(color, rights) {\n        for (const side of [KING, QUEEN]) {\n            if (rights[side] !== undefined) {\n                if (rights[side]) {\n                    this._castling[color] |= SIDES[side];\n                }\n                else {\n                    this._castling[color] &= ~SIDES[side];\n                }\n            }\n        }\n        this._updateCastlingRights();\n        const result = this.getCastlingRights(color);\n        return ((rights[KING] === undefined || rights[KING] === result[KING]) &&\n            (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN]));\n    }\n    getCastlingRights(color) {\n        return {\n            [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n            [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,\n        };\n    }\n    moveNumber() {\n        return this._moveNumber;\n    }\n}\n//# sourceMappingURL=chess.js.map","// extracted by mini-css-extract-plugin\nexport default {\"module\":\"oZzzSD5h\",\"board\":\"uMa1QfRN\"};","import { connection } from '../app/connection';\nimport { Button, Input } from '../common';\nimport { getBoardModule } from '../modules';\n\nconst getMessageElement = (text) => {\n  const message = document.createElement('div');\n  message.innerText = `[${new Date().getHours()}:${new Date().getMinutes()}] ${text}`;\n  message.style.fontSize = '24px';\n\n  return message;\n};\n\nexport default () => {\n  const page = document.createElement('div');\n\n  const form = document.createElement('form');\n  form.style.display = 'flex';\n  form.style.justifyContent = 'center';\n  form.style.padding = '20px';\n  form.onsubmit = (event) => event.preventDefault();\n\n  const chatContainer = document.createElement('div');\n  chatContainer.style.padding = '0 16px';\n  if (connection.dataChannel) {\n    connection.dataChannel.addEventListener('message', (event) => {\n      const message = JSON.parse(event.data).message;\n      if (message) {\n        const messageElement = getMessageElement(message);\n        messageElement.style.color = 'grey';\n        chatContainer.prepend(messageElement);\n      }\n    });\n  }\n  const input = new Input().element;\n  const sendButton = new Button('Send', () => {\n    if (input.value) {\n      const messageElement = getMessageElement(input.value);\n      chatContainer.prepend(messageElement);\n      if (connection.dataChannel) {\n        const dataPresentation = JSON.stringify({\n          message: input.value,\n        });\n        connection.dataChannel.send(dataPresentation);\n      }\n      input.value = '';\n    }\n  }).element;\n\n  page.appendChild(getBoardModule());\n  form.appendChild(input);\n  form.appendChild(sendButton);\n  page.appendChild(form);\n  page.appendChild(chatContainer);\n  return page;\n};\n","import './app/styles/normalize.css';\nimport { makeServiceWorkers } from './app/service';\nimport {\n  getAlicePage,\n  getBobPage,\n  getConnectPage,\n  getGamePage,\n  getHomePage,\n} from './pages';\nimport router from './app/router';\n\nwindow.addEventListener('load', () => {\n  makeServiceWorkers();\n});\n\nconst rootElement = document.getElementById('root');\n\nrouter.initPageContainer(rootElement);\nrouter.initRoutes({\n  '/': getHomePage,\n  '/alice': getAlicePage,\n  '/bob': getBobPage,\n  '/connect': getConnectPage,\n  '/game': getGamePage,\n});\n","import router from '../app/router';\nimport { getMenuModule } from '../modules';\nimport { Button } from '@/common';\n\nexport default () => {\n  const page = document.createElement('div');\n\n  const connectButton = new Button('p2p', () => {\n    router.navigate('connect');\n  }).element;\n  const engineButton = new Button('Engine').element;\n  engineButton.disabled = true;\n  const offlineButton = new Button('Offline').element;\n  offlineButton.disabled = true;\n\n  const menuButtons = [connectButton, offlineButton, engineButton];\n\n  page.appendChild(getMenuModule('Menu', menuButtons));\n\n  return page;\n};\n","import { Button } from '@/common';\nimport router from '../app/router';\nimport { connection } from '../app/connection';\nimport { store } from '../app/data';\nimport { SET_ORIENTATION } from '../app/data/actions';\n\nconst getStatusElement = () => {\n  const status = document.createElement('div');\n  status.style.padding = '8px';\n  status.style.fontSize = '22px';\n\n  status.innerText = 'Статус: ожидаем offer';\n\n  return status;\n};\n\nexport default () => {\n  store.dispatch({ type: SET_ORIENTATION, payload: { orientation: 'black' } });\n\n  const page = document.createElement('div');\n  page.style.padding = '20px';\n\n  const statusElement = getStatusElement();\n  const logContainer = document.createElement('div');\n\n  connection.initPeerConnection();\n  connection.initLogger(logContainer);\n  connection.onIceCandidate = () => {\n    statusElement.innerText = 'Статус: создан answer';\n  };\n\n  const pasteButton = new Button('Paste', () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        connection.onIceCandidate(\n          () => (statusElement.innerText = 'Статус: создан answer')\n        );\n        connection.setRemoteDescription(text);\n        connection.onOpen('alice', () => {\n          router.navigate('game');\n        });\n        connection.createAnswer();\n      })\n      .catch(console.error);\n  }).element;\n  pasteButton.style.marginRight = '8px';\n\n  const copyOffer = new Button('Copy', () => {\n    const offer = connection.getLocalDescription();\n    if (offer) {\n      navigator.clipboard\n        .writeText(offer)\n        .then(() => {\n          statusElement.innerText = 'Статус: скопировано, ждем открытия канала';\n        })\n        .catch(console.error);\n    }\n  }).element;\n\n  page.appendChild(statusElement);\n  page.appendChild(pasteButton);\n  page.appendChild(copyOffer);\n  page.appendChild(logContainer);\n\n  return page;\n};\n","import { Button } from '@/common';\nimport router from '../app/router';\nimport { connection } from '../app/connection';\nimport { store } from '../app/data';\nimport { SET_ORIENTATION } from '../app/data/actions';\n\nconst initCallbacks = (statusElement) => {\n  connection.onOpen('bob', () => {\n    router.navigate('game');\n  });\n  connection.onIceCandidate(() => {\n    statusElement.innerText = 'Статус: создан offer';\n  });\n};\n\nconst getStatusElement = () => {\n  const status = document.createElement('div');\n  status.style.padding = '8px';\n  status.style.fontSize = '22px';\n\n  status.innerText = 'Статус:';\n\n  return status;\n};\n\nexport default () => {\n  store.dispatch({ type: SET_ORIENTATION, payload: { orientation: 'white' } });\n\n  const page = document.createElement('div');\n  page.style.padding = '20px';\n\n  const statusElement = getStatusElement();\n  const logContainer = document.createElement('div');\n\n  connection.initPeerConnection();\n  initCallbacks(statusElement);\n  connection.initLogger(logContainer);\n  connection.createOffer();\n\n  const copyOffer = new Button('Copy', () => {\n    const offer = connection.getLocalDescription();\n    if (offer) {\n      navigator.clipboard\n        .writeText(offer)\n        .then(() => {\n          statusElement.innerText = 'Статус: скопировано, ожидаем answer';\n        })\n        .catch(console.error);\n    }\n  }).element;\n  copyOffer.style.marginRight = '8px';\n\n  const pasteButton = new Button('Paste', () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        connection.setRemoteDescription(text);\n      })\n      .catch(console.error);\n  }).element;\n\n  page.appendChild(statusElement);\n\n  page.appendChild(copyOffer);\n  page.appendChild(pasteButton);\n  page.appendChild(logContainer);\n\n  return page;\n};\n","import { store } from '../app/data';\nimport { DELETE_TURN_SERVERS, SET_TURN_SERVERS } from '../app/data/actions';\nimport router from '../app/router';\nimport Component from '../base/Component';\nimport { getMenuModule } from '../modules';\nimport { Button } from '@/common';\n\nconst getTurnStatusElement = () => {\n  const turnStatus = new Component('div');\n  turnStatus.element.style.display = 'flex';\n  turnStatus.element.style.justifyContent = 'center';\n  turnStatus.subscribe(store, () => {\n    if (store.getState()?.connection?.turn.length > 0) {\n      turnStatus.element.innerText = 'turn is connected';\n      turnStatus.element.style.color = 'green';\n    } else if (store.getState()?.connection?.error) {\n      turnStatus.element.innerText = store.getState().connection.error;\n      turnStatus.element.style.color = 'red';\n    } else {\n      turnStatus.element.innerText = 'turn is not connected';\n      turnStatus.element.style.color = 'orange';\n    }\n  });\n\n  return turnStatus.element;\n};\n\nexport default () => {\n  const page = document.createElement('div');\n\n  const bobButton = new Button('Bob', () => {\n    router.navigate('bob');\n  }).element;\n\n  const aliceButton = new Button('Alice', () => {\n    router.navigate('alice');\n  }).element;\n\n  const turnButton = new Button('Past TURN', () => {\n    navigator.clipboard\n      .readText()\n      .then((text) => {\n        store.dispatch({\n          isFetch: true,\n          type: SET_TURN_SERVERS,\n          payload: { url: text },\n        });\n      })\n      .catch(console.error);\n  }).element;\n\n  const deleteTurnButton = new Button('Delete TURN', () => {\n    store.dispatch({ type: DELETE_TURN_SERVERS });\n  }).element;\n\n  const backButton = new Button('←', () => {\n    router.navigate('');\n  }).element;\n  backButton.style.marginTop = '20px';\n\n  const menuButtons = [\n    bobButton,\n    aliceButton,\n    turnButton,\n    deleteTurnButton,\n    backButton,\n  ];\n\n  page.appendChild(getMenuModule('Choose the role', menuButtons));\n  page.appendChild(getTurnStatusElement());\n\n  return page;\n};\n","import { Chess } from 'chess.js';\nimport { connection } from '../../app/connection';\nimport styles from './style.module.css';\nimport { store } from '../../app/data';\n\nconst initBoard = () => {\n  setTimeout(() => {\n    function onDragStart(_, piece) {\n      if (game.isGameOver()) return false;\n\n      if (\n        (game.turn() === 'w' && piece.search(/^b/) !== -1) ||\n        (game.turn() === 'b' && piece.search(/^w/) !== -1) ||\n        (store.getState().game.orientation === 'white' &&\n          piece.search(/^b/) !== -1) ||\n        (store.getState().game.orientation === 'black' &&\n          piece.search(/^w/) !== -1)\n      ) {\n        return false;\n      }\n    }\n\n    function onDrop(source, target) {\n      try {\n        var move = game.move({\n          from: source,\n          to: target,\n          promotion: 'q',\n        });\n        if (connection.dataChannel) {\n          const movePresentation = JSON.stringify({ move });\n          connection.dataChannel.send(movePresentation);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n\n    const game = new Chess();\n\n    const board = Chessboard('board', {\n      pieceTheme: 'assets/{piece}.png',\n      position: 'start',\n      draggable: true,\n      dropOffBoard: 'trash',\n      sparePieces: false,\n      onDragStart,\n      onDrop,\n      onSnapEnd,\n    });\n\n    board.orientation(store.getState().game.orientation);\n\n    function onSnapEnd() {\n      board.position(game.fen());\n    }\n\n    if (connection.dataChannel) {\n      connection.dataChannel.addEventListener('message', () => {\n        const move = JSON.parse(event.data).move;\n        if (move) {\n          game.move(move);\n          board.position(game.fen());\n        }\n      });\n    }\n  });\n};\n\nexport default () => {\n  const element = document.createElement('div');\n  element.classList.add(styles.module);\n\n  const boardElement = document.createElement('div');\n  boardElement.id = 'board';\n  boardElement.classList.add(styles.board);\n\n  initBoard();\n  element.appendChild(boardElement);\n  return element;\n};\n"],"names":["peerConfiguration","iceServers","urls","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","constructor","tagName","attributes","arguments","length","this","_element","document","createElement","entries","setAttribute","element","subscribe","store","callback","Component","text","super","innerText","classList","add","updateText","onClick","onclick","pageId","console","log","window","addEventListener","event","_resolve","initRoutes","routes","_routes","initPageContainer","_pageContainer","id","_activeClassResolver","eventType","location","hash","updateActiveClass","navigate","url","isActive","_updatePage","innerHTML","appendChild","getHomePage","getNewPage","replace","require","connection","initPeerConnection","state","JSON","parse","localStorage","getItem","push","turn","peer","RTCPeerConnection","initLogger","logContainer","addMessage","message","status","style","paddingBottom","color","prepend","onconnectionstatechange","iceConnectionState","onicecandidateerror","type","onicecandidate","candidate","getLocalDescription","stringify","localDescription","onIceCandidate","setRemoteDescription","rowData","createOffer","offer","setLocalDescription","error","createAnswer","answer","onOpen","role","ondatachannel","dataChannel","channel","onopen","createDataChannel","FETCH_ERROR","SET_TURN_SERVERS","DELETE_TURN_SERVERS","SET_ORIENTATION","LOCAL_STORAGE_KEY","reducers","middlewares","isLocalStorageConnected","_reducers","_middlewares","_isLocalStorageConnected","stateFromLocalStorage","_state","_reduce","_listeners","_initMiddlewares","_this","middlewareAPI","getState","bind","dispatch","action","_len","args","Array","_key","chain","map","middleware","reduce","next","keys","acc","setItem","forEach","listener","filter","l","profile","username","avatar","payload","stun","data","game","orientation","isFetch","fetch","then","response","json","async","isArray","Promise","reject","Error","server","resolve","isPeerConfigObject","newAction","catch","errorMessage","name","setTimeout","headerText","buttons","header","Header","button","WHITE","BLACK","PAWN","BISHOP","ROOK","QUEEN","KING","DEFAULT_POSITION","EMPTY","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","Ox88","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","q","k","ATTACKS","RAYS","PIECE_MASKS","p","PROMOTIONS","SIDES","ROOKS","square","flag","SECOND_RANK","TERMINATION_MARKERS","rank","file","isDigit","c","indexOf","algebraic","f","substring","swapColor","addMove","moves","from","to","piece","captured","flags","i","promotion","inferPieceType","san","pieceType","charAt","match","toLowerCase","strippedSan","move","trimFen","fen","split","slice","join","Chess","_board","_turn","_header","_kings","_epSquare","_halfMoves","_moveNumber","_history","_comments","_castling","_positionCounts","load","clear","preserveHeaders","Proxy","target","position","set","count","trimmedFen","removeHeader","skipValidation","tokens","adjustments","concat","ok","moveNumber","parseInt","isNaN","halfMoves","test","rows","sumFields","previousWasNumber","kings","regex","some","char","toUpperCase","validateFen","_put","_updateSetup","empty","castling","epSquare","bigPawnSquare","squares","_makeMove","isLegal","_isKingAttacked","_undoMove","reset","put","_updateCastlingRights","_updateEnPassantSquare","sq","currentPieceOnSquare","remove","whiteKingInPlace","blackKingInPlace","startSquare","currentSquare","attackers","_attacked","difference","index","offset","j","blocked","isAttacked","attackedBy","isCheck","inCheck","isCheckmate","_moves","isStalemate","isInsufficientMaterial","pieces","bishops","numPieces","squareColor","sum","len","_getRepetitionCount","isThreefoldRepetition","isDraw","isGameOver","verbose","_makePretty","_moveToSan","legal","forSquare","forPiece","us","them","firstSquare","lastSquare","singleSquare","castlingFrom","castlingTo","legalMoves","strict","moveObj","_moveFromSan","prettyMove","after","_push","undo","old","pop","pgn","newline","maxWidth","result","headerExists","appendComment","moveString","comment","reversedHistory","prefix","Result","strip","wrapComment","width","token","currentWidth","includes","loadPgn","newlineChar","mask","str","trim","headerRegexResults","RegExp","exec","headerString","headers","headerObj","parsePgnHeader","encodeComment","s","charCodeAt","toString","encodeURIComponent","toHex","decodeComment","startsWith","endsWith","decodeURIComponent","fromHex","ms","_match","bracket","semicolon","ravRegex","halfMove","output","disambiguator","ambiguities","sameRank","sameFile","ambigFrom","ambigTo","getDisambiguator","cleanMove","matches","overlyDisambiguated","ascii","perft","depth","nodes","uglyMove","prettyFlags","fromAlgebraic","toAlgebraic","lan","before","board","row","history","moveHistory","_pruneComments","currentComments","copyComment","getComment","setComment","deleteComment","getComments","deleteComments","setCastlingRights","rights","side","getCastlingRights","getMessageElement","Date","getHours","getMinutes","fontSize","navigator","serviceWorker","register","makeServiceWorkers","rootElement","getElementById","router","page","connectButton","Button","engineButton","disabled","offlineButton","menuButtons","getMenuModule","padding","statusElement","getStatusElement","pasteButton","clipboard","readText","marginRight","copyOffer","writeText","initCallbacks","bobButton","aliceButton","turnButton","deleteTurnButton","backButton","marginTop","getTurnStatusElement","turnStatus","display","justifyContent","form","onsubmit","preventDefault","chatContainer","messageElement","input","Input","sendButton","dataPresentation","send","boardElement","Chessboard","pieceTheme","draggable","dropOffBoard","sparePieces","onDragStart","_","search","onDrop","source","movePresentation","onSnapEnd","getBoardModule"],"sourceRoot":""}